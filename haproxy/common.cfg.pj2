global
    limited-quic
    {%if hconfigs['log_level']!="CRITICAL"%}
    log /opt/hiddify-manager/log/system/haproxy.err.log local0 warning
    {%endif%}



defaults
    log global
    retry-on all-retryable-errors

    timeout connect 5s
    timeout client 50s
    timeout client-fin 50s
    timeout server 50s
    timeout tunnel 1h
    default-server init-addr none
    default-server inter 15s fastinter 2s downinter 5s rise 3 fall 3
    mode tcp
    #tune.h2.initial-window-size 536870912
    #tune.h2.max-concurrent-streams 512

### standalone stats page
listen stats
        # accessible at http://192.168.1.100/haproxy?stats
        bind 127.0.0.1:8181
      	mode http
      	option httplog
      	stats enable
      	stats admin if TRUE
      	stats refresh 5m

frontend https-in
    
    {% for port in (["443"] + hconfigs['tls_ports'].split(',')) | unique %}
    bind :{{port}},:::{{port}} v4v6 tfo 
    {%endfor%}
    # option tcplog
    # option dontlognull
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    acl tls1_2 req.ssl_ver 3.3
    acl tls1_3 req.ssl_ver 3.4
    
    acl is_cdn src -f /opt/hiddify-manager/haproxy/cloudflare.lst -f /opt/hiddify-manager/haproxy/arvan.lst -f /opt/hiddify-manager/haproxy/cloudfront.lst
    use_backend to_https_in_ssl if is_cdn
    
    {%for d in domain if d['mode']=='sub_link_only'%} 
    use_backend to_panel_only if { req.ssl_sni -i {{d['domain']}} }
    {%endfor%}
        
    {% for d in domains if d['internal_port_reality'] and d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
    use_backend reality_grpc_{{port}} if { req.ssl_sni -i {{domain}}  }
    {%endfor%}

    {% for d in domains if d['internal_port_reality'] and not d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
    use_backend reality_{{port}} if { req.ssl_sni -i {{domain}}  }
    {%endfor%}


        
    {%if hconfigs['ssfaketls_enable'] and hconfigs['ssfaketls_fakedomain'] %}
    use_backend ssfake if { req.ssl_sni -i {{hconfigs['ssfaketls_fakedomain']}}  }
    {%endif%}
        
        
    {%if hconfigs['telegram_enable'] and hconfigs['telegram_fakedomain'] %}
    use_backend telegram if { req.ssl_sni -i {{hconfigs['telegram_fakedomain']}} }
    {%endif%}

    {%if hconfigs['shadowtls_enable'] and hconfigs['shadowtls_fakedomain']%}
    use_backend shadowtls if { req.ssl_sni -i {{hconfigs['shadowtls_fakedomain'] }} } 
    {%endif%}
        
    {% for d in domains if d['mode']=='old_xtls_direct' %}
    use_backend xray_force if { req.ssl_sni -i {{d['domain']}}  }
    {%endfor%}

    default_backend to_https_in_ssl
    

backend to_https_in_ssl
    server haproxy abns@https_in_ssl send-proxy-v2 tfo
backend to_https_in_ssl_h2
    server haproxy abns@https_in_ssl_h2 send-proxy-v2 tfo

backend generate_204
    mode http
    http-request return status 204

frontend onlypanel_in
    mode http
    bind abns@onlypanel_in accept-proxy ssl crt /opt/hiddify-manager/ssl/ alpn h2,http/1.1,h3
    use_backend generate_204 if { path -i /{{hconfigs['proxy_path_client']}}/generate_204 }
    use_backend generate_204 if { path -i /{{hconfigs['proxy_path']}}/generate_204 }

    acl hpanel path_reg ^/{{hconfigs['proxy_path']}}/[1-9a-f][1-9a-f]
    use_backend hiddifypanel if hpanel

    default_backend nginx_dispatcher_http

backend to_panel_only
    server to_panel_only abns@onlypanel_in send-proxy-v2

frontend quic-in
  {% for port in (["443"] + hconfigs['tls_ports'].split(',')) | unique %}
    bind quic4@:{{port}},quic6@:{{port}} v4v6 tfo ssl crt /opt/hiddify-manager/ssl/ alpn h3    
    {%endfor%}
  mode http
    use_backend generate_204 if { path -i /{{hconfigs['proxy_path_client']}}/generate_204 }
    use_backend generate_204 if { path -i /{{hconfigs['proxy_path']}}/generate_204 }

    {% include '/opt/hiddify-manager/haproxy/common_h1h2rules4http.lst.pj2' %}
{%if hconfigs['xhttp_enable']%}
    use_backend vmesshs_http_h2 if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_xhttp'] }} }
    use_backend vlesshs_http_h2 if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_xhttp'] }} }
    use_backend trojanhs_http_h2 if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_xhttp'] }} }
    {%endif%}


    default_backend nginx_dispatcher_http_h2

frontend http-https-in
    {% for port in (["80"] + hconfigs['http_ports'].split(',')) | unique%}
    bind :{{port}},:::{{port}} v4v6 tfo
    {%endfor%}
    bind abns@https_in_ssl tfo accept-proxy ssl crt /opt/hiddify-manager/ssl/ alpn h2,http/1.1,h3 allow-0rtt
    acl h2 ssl_fc_alpn -i h2


    
    http-response set-header alt-svc "h3=\":443\";ma=900;"
    tcp-request inspect-delay 5s
    tcp-request content accept if HTTP

    

    {% include '/opt/hiddify-manager/haproxy/common_h1h2rules4http.lst.pj2' %}

    {%if hconfigs['tcp_enable']%}
    use_backend vmesst if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_tcp'] }} }
    use_backend vlesst if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_tcp'] }} }
    use_backend  v2rayt if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_tcp'] }} }
    use_backend trojant if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_tcp'] }} }
    {%endif%}


    {%if hconfigs['ws_enable']%}
    use_backend vmessw if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_ws'] }} }
    use_backend vlessw if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_ws'] }} }
    use_backend v2rayw if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_ws'] }} }
    use_backend trojanw if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_ws'] }} }
    {%endif%}

    {%if hconfigs['httpupgrade_enable']%}
    use_backend vmesshu if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_httpupgrade'] }} }
    use_backend vlesshu if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_httpupgrade'] }} }
    use_backend trojanhu if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_httpupgrade'] }} }
    {%endif%}

    {%if hconfigs['xhttp_enable']%}
    use_backend vmesshs if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_xhttp'] }} }
    use_backend vlesshs if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_xhttp'] }} }
    use_backend trojanhs if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_xhttp'] }} }
    {%endif%}

    use_backend nginx_dispatcher_h2 if h2

    default_backend nginx_dispatcher

# this server handles xray http2 proxies
backend nginx_dispatcher_h2
    server nginx unix@/opt/hiddify-manager/nginx/run/h2.sock send-proxy-v2 tfo

# this server doesn't handle any proxy
backend nginx_dispatcher
    server nginx unix@/opt/hiddify-manager/nginx/run/h1.sock send-proxy-v2 tfo

backend nginx_dispatcher_http
    mode http
    server nginx unix@/opt/hiddify-manager/nginx/run/h1.sock send-proxy-v2 tfo

backend nginx_dispatcher_http_h2
    mode http
    server nginx unix@/opt/hiddify-manager/nginx/run/h2.sock send-proxy-v2 tfo proto h2


backend tgdecoy
    server tgdecoy {{hconfigs['telegram_fakedomain']}}

backend tgdecoy_http
    mode http
    server tgdecoy_http {{hconfigs['telegram_fakedomain']}}

backend telegram
    server telegram 127.0.0.1:1001

{%if hconfigs['ssfaketls_enable'] and hconfigs['ssfaketls_fakedomain'] %}
backend ssdecoy_http
    mode http
    server ssdecoy {{hconfigs['ssfaketls_fakedomain']}}
backend ssfake
    server ssfake 127.0.0.1:1010 tfo
{%endif%}


{%if hconfigs['shadowtls_enable'] and hconfigs['shadowtls_fakedomain']%}
backend shadowtls_decoy_http
    mode http
    server shadowtls_decoy_http {{hconfigs['shadowtls_fakedomain']}}
backend shadowtls_decoy
    server shadowtls_decoy {{hconfigs['shadowtls_fakedomain']}}
{%endif%}

backend xray_force
    # server xray unix@/dev/shm/hiddify-xtls-main.sock
    server xray abns@xtlsin send-proxy-v2

backend hiddifypanel
    mode http
    http-request set-header X-Forwarded-For %[src]
    server hpanel 127.0.0.1:9000


{% for d in domains if d['internal_port_reality'] and d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
backend reality_grpc_http_{{port}}
    mode http
    server reality_{{port}} {{domain}}:80 
{%endfor%}

{% for d in domains if d['internal_port_reality'] and not d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
backend reality_http_{{port}}
    mode http
    server reality_{{port}} {{domain}}:80 
{%endfor%}


backend shadowtls
    server singbox 127.0.0.1:1030 tfo 

backend v2rayw
  server v2rayw 127.0.0.1:1020  tfo 

backend v2rayw_h2
  server v2rayw 127.0.0.1:1020  tfo 


backend vmesshs
  server vmesshs unix@/opt/hiddify-manager/xray/run/vmess-xhttp.sock

backend vlesshs 
  server vlesshs unix@/opt/hiddify-manager/xray/run/vless-xhttp.sock


backend trojanhs
  server trojanhs unix@/opt/hiddify-manager/xray/run/trojan-xhttp.sock


backend vmesshs_http_h2
  mode http
  server vmesshs unix@/opt/hiddify-manager/xray/run/vmess-xhttp.sock proto h2

backend vlesshs_http_h2
  mode http
  server vlesshs unix@/opt/hiddify-manager/xray/run/vless-xhttp.sock proto h2

backend trojanhs_http_h2
  mode http
  server trojanhs unix@/opt/hiddify-manager/xray/run/trojan-xhttp.sock proto h2

# Due deprecation by Xray, we pass hu, h2, http to the Singbox.
backend trojanhu
  server trojanw 127.0.0.1:2014 send-proxy-v2 tfo

backend vlesshu
  server vlesshu 127.0.0.1:2024 send-proxy-v2 tfo

backend vmesshu
  server vmesshu 127.0.0.1:2034 send-proxy-v2  tfo

backend vmesst_get_h2
  server vmesst 127.0.0.1:2039  send-proxy-v2 tfo

backend vlesst_h2
  server vlesst 127.0.0.1:2021  send-proxy-v2 tfo

backend vmesst_h2
  server vmesst 127.0.0.1:2031  send-proxy-v2 tfo

{% for d in domains if d['internal_port_reality'] and not d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
backend reality_h2_{{port}}
    mode tcp
    server singbox 127.0.0.1:{{port}} send-proxy-v2
{%endfor%}

backend trojanw_h2
  server trojanw 127.0.0.1:2012 send-proxy-v2 tfo

backend trojant_h2
  server trojant 127.0.0.1:2011  send-proxy-v2 tfo

